from __future__ import print_function

from functools import partial
import os.path
import shutil
import sys

from . import errors
from . import utils
from .version import __version__, REPO


class Context(object):
    def __init__(self, out_dir, default_factory, factories):
        if not os.path.isdir(out_dir):
            raise errors.StubFileError(out_dir, 'directory does not exist')
        self.out_dir = out_dir
        self.default_factory = default_factory
        self.factories = factories
        self.cache = {}

    def do_emit(self, mod_name):
        emitter = self.get_emitter(mod_name)
        out_name = os.path.join(self.out_dir, *mod_name.split('.'))

        # Remove both package and non-package case, in case of changes.
        shutil.rmtree(out_name, ignore_errors=True)
        utils.remove(out_name + '.pyi')

        is_package = emitter.is_package()
        if is_package:
            out_name = os.path.join(out_name, '__init__')
        out_name += '.pyi'

        utils.makedirs(os.path.dirname(out_name))
        try:
            with open(out_name, 'w') as out:
                self.header(emitter, out)
                emitter.emit(out)
        except:
            utils.remove(out_name)
            raise
        if is_package:
            return ['%s.%s' % (mod_name, x) for x in emitter.list_children()]
        return []

    def header(self, emitter, out):
        py_version = 'Python %d.%d' % sys.version_info[:2]
        p = partial(print, file=out)
        p('# Generated by stubtool %s, DO NOT EDIT' % (__version__))
        p('# See %s' % REPO)
        p('#')
        p('# Stubs for %s (%s)' % (emitter.mod_name, py_version))
        p()

    def get_cached_emitter(self, mod_name, parent):
        rv = self.cache.get(mod_name)
        if rv is None:
            if parent is None:
                factory = self.factories.get(mod_name, self.default_factory)
                rv = factory(mod_name, None)
            else:
                factory = self.factories.get(mod_name, type(parent))
                rv = parent.create_child(factory, mod_name)
            self.cache[mod_name] = rv
        return rv

    def get_emitter(self, full_mod_name):
        parts = full_mod_name.split('.')
        emitter = None
        for part in parts:
            if emitter is None:
                cur_mod_name = part
            else:
                cur_mod_name = '%s.%s' % (cur_mod_name, part)
                if not emitter.is_package():
                    raise errors.StubNotPackageError(cur_mod_name, full_mod_name)
            emitter = self.get_cached_emitter(cur_mod_name, emitter)
        assert cur_mod_name == full_mod_name
        return emitter
